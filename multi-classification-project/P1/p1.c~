#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

float training_time, testing_time;
const int predicting_sample_number = 37786;
const char filename_result[20] = "result.txt";

void learning_thread();
void predicting_thread();
void performance_calculate();

int main()
{
	clock_t training_start, training_end, testing_start, testing_end;
	//*---------------------training-----------------------*/
	training_start = clock();
	learning_thread();
	training_end = clock();
	training_time = (float)(training_end - training_start) / CLOCKS_PER_SEC;
	//*---------------------predicting-----------------------*/
	testing_start = clock();
	predicting_thread();
	testing_end = clock();
	testing_time = (float)(testing_end - testing_start) / CLOCKS_PER_SEC;
	//*---------------------performance-----------------------*/
	performance_calculate();
}

void learning_thread()
{
	char command[20];
	memset(command, '\0', sizeof(command));
	sprintf(command, "./train train.txt");
	system(command);
	return;
}

void predicting_thread()
{
	char command[64];
	memset(command, '\0', sizeof(command));
	sprintf(command, "./predict test.txt train.txt.model result.txt");
	system(command);
	return;
}

void performance_calculate()
{
	const int length_of_temp_test = 100000;
	const int length_of_temp_result = 100000;
	char temp_test[length_of_temp_test], temp_result[length_of_temp_result];
	char filename_test[20] = "test.txt";
	char filename_performance[20] = "performance.txt";
	int TP = 0, TN = 0, FP = 0, FN = 0;
	float p, r, F1, TPR, FPR;
	int countdown = predicting_sample_number;
	int i;
	FILE* fp_result, *fp_performance, *fp_test;
	fp_result = fopen(filename_result, "r");
	fp_test = fopen(filename_test, "r");
	fp_performance = fopen(filename_performance, "a");
	memset(temp_test, '\0', sizeof(temp_test));
	memset(temp_result, '\0', sizeof(temp_result));

	while (countdown-->0)
	{
		fgets(temp_test, length_of_temp_test, fp_test);
		fgets(temp_result, length_of_temp_result, fp_result);
		if (temp_test[0] == 'A')
		if (temp_result[0] == '1')
			TP++;
		else
			FN++;
		else
		if (temp_result[0] != '1')
			TN++;
		else
			FP++;
	}

	p = TP*1.0 / (TP + FP);
	r = TP*1.0 / (TP + FN);
	F1 = 2.0*r*p / (r + p);
	TPR = TP*1.0 / (TP + FN);
	FPR = FP*1.0 / (FP + TN);
	fprintf(fp_performance, "precision = %f\nrecall = %f\nF1 = %f\nTPR = %f\nFPR = %f\ntraining time = %fs\ntesting time = %fs\n", p, r, F1, TPR, FPR, training_time, testing_time);
	fclose(fp_test);
	fclose(fp_result);
	fclose(fp_performance);
}

